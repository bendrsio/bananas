import { app, BrowserWindow, ipcMain, dialog } from "electron";
import fs from "fs";
import path from "path";
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
  app.quit();
}

ipcMain.handle("dialog:openFile", async () => {
  const { canceled, filePaths } = await dialog.showOpenDialog({
    properties: ["openFile"],
    filters: [
      { name: "Markdown", extensions: ["md", "markdown"] },
      { name: "All Files", extensions: ["*"] },
    ],
  });
  if (!canceled && filePaths.length > 0) {
    const filePath = filePaths[0];
    const content = fs.readFileSync(filePath, "utf-8");
    const fileName = path.basename(filePath);
    return { content, filePath, fileName };
  }
  return null;
});

ipcMain.handle("dialog:saveFile", async (_, content: string) => {
  const { canceled, filePath } = await dialog.showSaveDialog({
    defaultPath: "Untitled.md",
    filters: [
      { name: "Markdown", extensions: ["md", "markdown"] },
      { name: "All Files", extensions: ["*"] },
    ],
  });
  if (!canceled && filePath) {
    const resolvedPath = path.extname(filePath) ? filePath : `${filePath}.md`;
    fs.writeFileSync(resolvedPath, content);
    const fileName = path.basename(resolvedPath);
    return { filePath: resolvedPath, fileName };
  }
  return null;
});

ipcMain.handle("file:write", async (_, filePath: string, content: string) => {
  fs.writeFileSync(filePath, content);
  return filePath;
});

ipcMain.handle("dialog:confirmSaveBeforeNew", async () => {
  const { response } = await dialog.showMessageBox({
    type: "question",
    buttons: ["Save", "Don't Save", "Cancel"],
    defaultId: 0,
    cancelId: 2,
    title: "Save changes?",
    message: "Save changes to the current document before creating a new one?",
    detail: "Your changes will be lost if you donâ€™t save them.",
    noLink: true,
  });
  return response; // 0 Save, 1 Don't Save, 2 Cancel
});

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  // mainWindow.webContents.openDevTools();

  // Intercept window close (Cmd+W or clicking close)
  const canClose = new Set<number>();
  mainWindow.on("close", (e) => {
    if (!canClose.has(mainWindow.id)) {
      e.preventDefault();
      mainWindow.webContents.send("app:attempt-close");
    } else {
      canClose.delete(mainWindow.id);
    }
  });

  // Listen for proceed/cancel from renderer
  ipcMain.on("app:proceed-close", (event) => {
    const win = BrowserWindow.fromWebContents(event.sender);
    if (win) {
      canClose.add(win.id);
      win.close();
    }
  });

  ipcMain.on("app:cancel-close", () => {
    // no-op; keep window open
  });
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on("ready", () => {
  createWindow();
});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on("window-all-closed", () => {
  app.quit();
});

app.on("activate", () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
